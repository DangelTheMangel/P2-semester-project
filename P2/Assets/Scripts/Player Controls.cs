//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Free movement"",
            ""id"": ""19574f97-f065-47ca-aef3-a13a729df117"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""0d7d721b-6e93-4fa2-9ff2-b4d01fe02ead"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c9996a1f-1482-476b-8bd7-422aec1127e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""dbb921f2-3da9-461b-8520-34f080c8063c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76f71404-1212-4215-8917-76365dc2ee99"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf489087-9c9d-4265-be0d-f91b3ee3c7cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5cf3b5f6-2c77-4b26-aefb-e2a7e83e5d2c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f081e5f7-3a81-4415-a66d-9267bb44b188"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1079b885-c031-4113-93cf-7852d9ee8749"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""b2535b39-f957-4321-9232-dc8781d9c08d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""3c66e1f5-836f-43fe-94e0-757116ab04f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9eed493b-fc89-4710-822c-7f5064b365f1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Free movement
        m_Freemovement = asset.FindActionMap("Free movement", throwIfNotFound: true);
        m_Freemovement_Move = m_Freemovement.FindAction("Move", throwIfNotFound: true);
        m_Freemovement_Interact = m_Freemovement.FindAction("Interact", throwIfNotFound: true);
        m_Freemovement_Rotate = m_Freemovement.FindAction("Rotate", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Newaction = m_Combat.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Free movement
    private readonly InputActionMap m_Freemovement;
    private IFreemovementActions m_FreemovementActionsCallbackInterface;
    private readonly InputAction m_Freemovement_Move;
    private readonly InputAction m_Freemovement_Interact;
    private readonly InputAction m_Freemovement_Rotate;
    public struct FreemovementActions
    {
        private @PlayerControls m_Wrapper;
        public FreemovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Freemovement_Move;
        public InputAction @Interact => m_Wrapper.m_Freemovement_Interact;
        public InputAction @Rotate => m_Wrapper.m_Freemovement_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Freemovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreemovementActions set) { return set.Get(); }
        public void SetCallbacks(IFreemovementActions instance)
        {
            if (m_Wrapper.m_FreemovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnInteract;
                @Rotate.started -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_FreemovementActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_FreemovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public FreemovementActions @Freemovement => new FreemovementActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Newaction;
    public struct CombatActions
    {
        private @PlayerControls m_Wrapper;
        public CombatActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Combat_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);
    public interface IFreemovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
